################################################
# Functions
################################################
snippet main
	int
	main(int argc,
		char *argv[])
	{
		${1}

		return 0;
	}
snippet fun
	/* ${1:function_name} {{{ */
	${2:void}
	$1(${3:void})
	{
		${4:/* code */}
	} /* }}} */
snippet fund
	 /** ${1:function_name} {{{
	  * @brief ${2:brief}
	  * @return ${3:return}
	  **/
	
	${4:void}
	$1(${5:void})
	{
		${6:/* code */}
	} /* }}} */
################################################
# Includes
################################################
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
################################################
# Definitions
################################################
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1
	
	${2}
	
	#endif /* end of include guard: $1 */
################################################
# If conditions
################################################
snippet if
	if(${1:/* condition */})
		{
			${2:/* code */}
		}
snippet if-
	if(${1:/* condition */})
		${2:/* code */}
snippet el
	else
		{
			${1}
		}
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
################################################
# While loops
################################################
snippet do
	do
		{
			${2:/* code */}
		} while(${1:/* condition */});
snippet wh
	while(${1:/* condition */})
		{
			${2:/* code */}
		}
snippet wh-
	while(${1:/* condition */})
		${2:/* code */}
################################################
# For loops
################################################
snippet for
	for(${2:i} = 0; $2 < ${1:count}; $2${3:++})
		{
			${4:/* code */}
		}
snippet for-
	for(${2:i} = 0; $2 < ${1:count}; $2${3:++})
		${4:/* code */}
snippet forr
	for(${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
		{
			${5:/* code */}
		}
################################################
# Typedef and struct
################################################
snippet td
	typedef ${1:int} ${2:MyCustomType};
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
		{
			${2:/* data */}
		}${3: /* optional variable list */};${4}
# Typedef struct
snippet tdef
	typedef struct ${2:$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
################################################
# Print
################################################
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet debug
	printf("DEBUG %s:%d\n", __FILE__, __LINE__);
################################################
# Docs
################################################
snippet doc
	 /** ${1:description} {{{
	  * @brief ${2:brief}
	  * ${3}
	  **/
snippet par
	@param[${1:in}]  ${2:variable}  ${3:description}
snippet ret
	@return ${1:return}
################################################
# Ruby
################################################
snippet i2f
	INT2FIX(${1:value})${2}
snippet f2i
	FIX2INT(${1:value})${2}
snippet s2p
	RSTRING_PTR(${1:string})${2}
snippet n2l
	NUM2LONG(${1:value})${2}
snippet l2n
	LONG2NUM(${1:value})${2}
snippet funcall
	rb_funcall(${1:klass}, rb_intern("${2:method}"), ${3:n}, ${4:NULL});
snippet ivget
	rb_iv_get(${1:object}, "@${2:attribute}");
snippet ivset
	rb_iv_set(${1:object}, "@${2:attribute}", ${3:value});
snippet conget
	rb_const_get(${1:rb_mKernel}, rb_intern("${2:klass}"));
snippet rbint
	rb_intern("${1:name}")${2}
snippet puts
	rb_p(${1:text});
################################################
# Flags
################################################
snippet flag
	${1:value}->flags${2}
snippet ifflag
	if(${1:value}->flags & ${2:flag})
		{
			${3:/* code */}
		}
snippet ifflag-
	if(${1:value}->flags & ${2:flag})
		${3:/* code */}
